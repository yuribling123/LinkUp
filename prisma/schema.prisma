// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  imageUrl  String   @db.Text
  email     String   @db.Text

  servers   Server[] @relation("ProfileToServers")
  members   Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String   @db.Text
  inviteCode String  @unique

  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade, name: "ProfileToServers")

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id          String    @id @default(uuid())
  role        MemberRole @default(GUEST)

  profileId   String
  profile     Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId    String
  server      Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  conversationInitiated Conversation[] @relation("MemberOne")
  conversationReceived Conversation[] @relation("MemberTwo")

  messages Message[]
  directMessages DirectMessage[]
   

  @@index([profileId])
  @@index([serverId])
}


enum ChannelType{
    TEXT
    AUDIO
    VIDEO
}

model Channel {
  id          String    @id @default(uuid())
  name        String
  type        ChannelType @default(TEXT)

  profileId   String
  profile     Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId    String
  server      Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
 
  Message Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId],references: [id],onDelete: Cascade)

  delete Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
   
}

model Conversation {
  id          String  @id @default(uuid())
  memberOneId String
  memberTwoId String

  memberOne   Member  @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo   Member  @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessage DirectMessage[]
@@index([memberOneId])
@@index([memberTwoId])

@@unique([memberOneId,memberTwoId])
}


model DirectMessage {
  id             String       @id @default(uuid())
  content        String       @db.Text
  fileUrl        String?      @db.Text
  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)

  // query for direct messages by a specific member, this index will make those queries faster
  @@index([memberId])
  @@index([conversationId])
}



